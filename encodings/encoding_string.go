// Code generated by stringer -type=Encoding; DO NOT EDIT.

package encodings

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Raw-0]
	_ = x[CopyRect-1]
	_ = x[RRE-2]
	_ = x[CoRRE-4]
	_ = x[Hextile-5]
	_ = x[Zlib-6]
	_ = x[Tight-7]
	_ = x[ZlibHex-8]
	_ = x[TRLE-15]
	_ = x[ZRLE-16]
	_ = x[Hitachi-17]
	_ = x[CursorPseudo-(-239)]
	_ = x[DesktopSizePseudo-(-223)]
	_ = x[ExtendedDesktopSizePseudo-(-308)]
	_ = x[DesktopNamePseudo-(-307)]
	_ = x[FencePseudo-(-312)]
	_ = x[ContinuousUpdatesPseudo-(-313)]
}

const (
	_Encoding_name_0 = "ContinuousUpdatesPseudoFencePseudo"
	_Encoding_name_1 = "ExtendedDesktopSizePseudoDesktopNamePseudo"
	_Encoding_name_2 = "CursorPseudo"
	_Encoding_name_3 = "DesktopSizePseudo"
	_Encoding_name_4 = "RawCopyRectRRE"
	_Encoding_name_5 = "CoRREHextileZlibTightZlibHex"
	_Encoding_name_6 = "TRLEZRLEHitachi"
)

var (
	_Encoding_index_0 = [...]uint8{0, 23, 34}
	_Encoding_index_1 = [...]uint8{0, 27, 44}
	_Encoding_index_2 = [...]uint8{0, 12}
	_Encoding_index_3 = [...]uint8{0, 17}
	_Encoding_index_4 = [...]uint8{0, 3, 11, 14}
	_Encoding_index_5 = [...]uint8{0, 5, 12, 16, 21, 28}
	_Encoding_index_6 = [...]uint8{0, 4, 8, 15}
)

// String returns the string representation of the Encoding.
func (i Encoding) String() string {
	switch {
	case -313 <= i && i <= -312:
		i -= -313
		return _Encoding_name_0[_Encoding_index_0[i]:_Encoding_index_0[i+1]]
	case -308 <= i && i <= -307:
		i -= -308
		return _Encoding_name_1[_Encoding_index_1[i]:_Encoding_index_1[i+1]]
	case i == -239:
		return _Encoding_name_2
	case i == -223:
		return _Encoding_name_3
	case 0 <= i && i <= 2:
		return _Encoding_name_4[_Encoding_index_4[i]:_Encoding_index_4[i+1]]
	case 4 <= i && i <= 8:
		i -= 4
		return _Encoding_name_5[_Encoding_index_5[i]:_Encoding_index_5[i+1]]
	case 15 <= i && i <= 17:
		i -= 15
		return _Encoding_name_6[_Encoding_index_6[i]:_Encoding_index_6[i+1]]
	default:
		return "Encoding(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
